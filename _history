{"entries":[{"timestamp":1743061244423,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"-?j.~Ja=C!.E8.Q%c{LQ\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"i[Ua`9LDHHI(CXUz^BCG\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,","],[0,"\n    "],[-1,"    \"blocks.ts\",\n        \"shims.d.ts\",\n        \"ns.ts\",\n        \"custombleservice.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":228,"start2":228,"length1":180,"length2":44}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"blocks.ts","value":"//% weight=100 color=#0066ff icon=\"\\uf294\" block=\"Custom BLE\"\r\nnamespace customBLE {\r\n    /**\r\n     * Starts the custom BLE service\r\n     */\r\n    //% block=\"start custom BLE service\"\r\n    //% weight=90\r\n    export function startService(): void {\r\n        control.inBackground(() => {\r\n            startCustomBLEService();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends data via custom characteristic\r\n     * @param data The data to send, eg: \"Hello\"\r\n     */\r\n    //% block=\"send data %data\"\r\n    //% weight=80\r\n    export function sendData(data: string): void {\r\n        sendCustomData(data);\r\n    }\r\n\r\n    /**\r\n     * Registers code to run when data is received\r\n     * @param handler Code to run when data is received\r\n     */\r\n    //% block=\"on data received\"\r\n    //% weight=70\r\n    export function onDataReceived(handler: (data: string) => void) {\r\n        onCustomDataReceived(handler);\r\n    }\r\n}"},{"type":"added","filename":"shims.d.ts","value":"// Auto-generated. Do not edit.\ndeclare namespace customBLE {\n    /**\n     * Starts the custom BLE service\n     */\n    //% shim=customBLE::startCustomBLEService\n    function startCustomBLEService(): void;\n\n    /**\n     * Sends data via custom characteristic\n     * @param data The data to send\n     */\n    //% shim=customBLE::sendCustomData\n    function sendCustomData(data: string): void;\n\n    /**\n     * Registers handler for received data\n     */\n    //% shim=customBLE::onCustomDataReceived\n    function onCustomDataReceived(handler: (data: string) => void): void;\n}"},{"type":"added","filename":"ns.ts","value":"namespace customBLE {\n    let _onDataReceived: (data: string) => void = null;\n    let _service: CustomBLEService = null;\n\n    //% whenUsed\n    export function notifyDataReceived(data: string) {\n        if (_onDataReceived) {\n            _onDataReceived(data);\n        }\n    }\n\n    //% whenUsed\n    export function startCustomBLEService(): void {\n        if (!_service) {\n            _service = new CustomBLEService(bluetooth);\n            bluetooth.onBluetoothConnected(() => {\n                // Handle connection\n            });\n            bluetooth.onBluetoothDisconnected(() => {\n                // Handle disconnection\n            });\n        }\n    }\n\n    //% whenUsed\n    export function sendCustomData(data: string): void {\n        if (_service) {\n            _service.sendData(data);\n        }\n    }\n\n    //% whenUsed\n    export function onCustomDataReceived(handler: (data: string) => void): void {\n        _onDataReceived = handler;\n    }\n}"},{"type":"added","filename":"custombleservice.ts","value":"//% weight=100 color=#0066ff icon=\"\\uf294\" block=\"Custom BLE\"\nnamespace customBLE {\n    /**\n     * Starts the custom BLE service\n     */\n    //% block=\"start custom BLE service\"\n    //% weight=90\n    export function startService(): void {\n        control.inBackground(() => {\n            startCustomBLEService();\n        });\n    }\n\n    /**\n     * Sends data via custom characteristic\n     * @param data The data to send, eg: \"Hello\"\n     */\n    //% block=\"send data %data\"\n    //% weight=80\n    export function sendData(data: string): void {\n        sendCustomData(data);\n    }\n\n    /**\n     * Registers code to run when data is received\n     * @param handler Code to run when data is received\n     */\n    //% block=\"on data received\"\n    //% weight=70\n    export function onDataReceived(handler: (data: string) => void) {\n        onCustomDataReceived(handler);\n    }\n}"}]}],"snapshots":[{"timestamp":1743061244422,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Custom BLE Blocks\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1743061535961}